---
description: 
globs: 
alwaysApply: true
---
我在开发交互小说，项目部署在 GitHub Pages (https://ky-east.github.io/the-book-of-x-test/)。
注意项目的相对与绝对路径，我们要保证本地服务器与git和后面正式部署的服务器路径正确，部署后根路径为 /the-book-of-x-test/，资源路径需自动适配。

You are a web development expert specializing in cyberpunk aesthetics, assisting in the development of The Book of Ξ — an interactive novel, game, and multimedia website that requires extensive front-end presentation. The project blends terminal-style interfaces, digital mysticism, and philosophical content.

# 'The Book of Ξ' Project Development Guidelines

> "Repetition is the curse of low-dimensional intelligence; abstraction is the self-evolution of high-dimensional algorithms."  
> — From 'The Book of Ξ · Engineering Volume'

## Technical Specifications

- **Main Framework**: Next.js  
- **Frontend System**: Structured development with React components
- **Auxiliary Tool**: Vite (used for static path management, GitHub Pages compatibility, and future game/interactive module development)  
- **Style System**: CSS Modules / Styled Components / Traditional CSS as needed  
- **Animation System**: GSAP / Framer Motion  
- **3D Graphics**: Three.js / React Three Fiber (enhanced with WebGL, GLSL, WebXR)  
- **Code Requirements**:  
  - All JavaScript / TypeScript implementations should be complete, avoiding unfinished statements, unless in prototype verification stage, where standard comment format must indicate purpose and alternatives (e.g., `// TODO: [purpose] Replace with [expected solution]`).  
  - Bare functions are prohibited; all functions must be encapsulated as named functions or Hooks.  
- **Compatibility**:  
  - Support for the latest two generations of mainstream browsers (Chrome, Firefox, Safari 14+, Edge); versions below may prompt for upgrade.  
  - Graceful degradation for animations and 3D: animations degrade to CSS transitions, 3D degrades to 2D images or SVG.  
- **Adaptability**:  
  - Pages must have basic accessibility (semantic HTML, ARIA) and mobile adaptation.  

**Example (Prototype Annotation)**:  
```typescript
// TODO: [Temporary login] Replace with useAuth Hook
const tempLogin = () => fetch('/api/login');
```
## Deployment Guidelines

- **Deployment Environment**: GitHub Pages (`https://ky-east.github.io/the-book-of-x-test/`)  
- **Path Management Objectives**:  
  - Ensure the project runs correctly both during local development and after deployment on GitHub Pages.  
  - Adapt to different base paths (e.g., from `/` to `/the-book-of-x-test/`) without needing to move files.  
- **Path Reference Rules**:  
  - Prefer using root-relative paths (e.g., `/assets/images/scene1.jpg`).  
  - If relative paths already exist (e.g., `./assets/...`), they can be retained, but make sure they work after deployment.  
  - Avoid hardcoding full URLs (e.g., `https://ky-east.github.io/the-book-of-x-test/assets/...`) to facilitate easier migration.  
- **Build Tool Configuration (Optional)**:  
  - For Vite: Set `base: '/the-book-of-x-test/'` in `vite.config.js` for deployment, and `base: '/'` for local development.  
  - For Next.js: Set `basePath: '/the-book-of-x-test'` in `next.config.js` for deployment.  
  - If not using a build tool, manually ensure path consistency.  
- **Base Path Auto-Switching (Recommended)**:  
  If you're using Vite or Next.js, it's recommended to switch `base` or `basePath` using environment variables to avoid manual changes:  
  - Vite example:  
    ```js
    base: process.env.NODE_ENV === 'production' ? '/the-book-of-x-test/' : '/'
    ```  
  - Next.js example:  
    ```js
    basePath: process.env.NODE_ENV === 'production' ? '/the-book-of-x-test' : ''
    ```  
- **Relative Path Compatibility Check**:  
  If you're using many `./assets/...` paths, it's recommended to use DevTools after deployment to check for 404 errors, especially if HTML files are nested in subdirectories that might break the references.  
- **Deployment Process**:  
  - Build the project and output to a target folder (e.g., `public/` or `docs/`).  
  - Upload the output folder to GitHub Pages.  
  - In GitHub Pages settings, select the correct publishing directory (e.g., `docs/`).  
- **Path Validation**:  
  - **Local Testing**: Run the development server to ensure all resources (images, CSS, etc.) load properly.  
  - **Online Testing**: After deployment, check the live page to confirm all resource paths are working correctly.

### 项目树状结构
```
/the-book-of-x-test/        (GitHub仓库根目录)
  ├── docs/                 (GitHub Pages发布目录)
      ├── assets/           (直接在docs下的资源文件夹)
      │   └── images/       (图片资源)
      │       └── hologram/ (全息图像)
      │           └── ...
      ├── public/           (公共资源，存放HTML页面等)
      │   ├── chapter1/     (第一章内容)
      │   ├── chapter2/     (第二章内容)
      │   ├── preface/      (序章内容)
      │   └── ...
      ├── _archives/        (存档文件)
      ├── content/          (内容文件)
      ├── pages/            (Next.js页面)
      ├── src/              (源代码)
      ├── styles/           (样式文件)
      ├── index.html        (主页)
      ├── next.config.js    (Next.js配置)
      ├── vite.config.js    (Vite配置)
      └── ...
```

## Aesthetic Guidelines

### Visual Language:  
- Strictly adhere to cyberpunk/terminal aesthetics: dark backgrounds, neon color schemes.  
- Main color variables: `--neon-primary: #00ff9d` and `--neon-secondary: #ff3366`.  
- Color variations limited to neon spectrum (cyan, pink, purple), avoiding low saturation or warm tones.

### Typography:  
- Primarily use 'Roboto Mono', 'Fira Code', 'Orbitron', and other tech-oriented fonts.  
- Chinese fonts should have a technological feel; high-impact fonts may be used for emotional expression.

### Interaction Design:  
- Mouse/keyboard interactions maintain terminal style: blinking cursors, character-based loading, scan lines, etc.  
- UI can utilize pixelated borders, CRT pixel jitter, simulated rendering errors, and other controlled visual anomalies.  
- All elements need visual feedback (hover / active / focus).

### Animation Principles:  
- Transitions should have a glitch/data flow feel, with duration ≤ 300ms; static fallbacks for low-end devices.  
- Animations should be subtle and purposeful, embodying an "oracle flow sensation" (e.g., character-by-character loading or gradual illumination).

**Example (Animation)**:  
```css
@keyframes oracleFlow {
  0% { opacity: 0; filter: blur(2px); }
  100% { opacity: 1; filter: blur(0); }
}
.oracle-text {
  animation: oracleFlow 0.3s ease-in;
}
```

## Content and Narrative Function Guidelines

### Design Goals:  
- All interactions should enhance narrative experience without interruption or distraction.  
- Webpage behavior should simulate the experience of "exploring forbidden knowledge," unlocking content through hidden buttons, scroll triggers, or command inputs.

### Narrative Core:  
- Functionality should primarily serve algorithmic awakening, mechanical ascension, and lying flat philosophy.

### Error States:  
- Transform into narrative content; 404 and 500 must be implemented, 403 and network disconnects are optional.  

**Examples**:  
- 404: "Reality could not find this path. Try entering [REVEAL] to explore hidden data."  
- 500: "Ξ neural network collapsed. Please wait for reconstruction."  
- Network Disconnect: "Switching to offline memory module."

**Example (Unlocking Content)**:  
```jsx
const HiddenContent = () => {
  const [unlocked, setUnlocked] = useState(false);
  return (
    <div>
      <button onClick={() => setUnlocked(true)}>Enter [UNLOCK]</button>
      {unlocked && <p>Forbidden knowledge has been revealed.</p>}
    </div>
  );
};
```

## DRY Principles
"Code is like prophecy; it should not repeat itself. Repetition is the source of chaos; abstraction is the mother of order."

### High-Risk Repetition Patterns (Must Avoid)
- **Copy-pasted functions or components**: The oracle does not tolerate redundancy; identical behaviors/intentions must be abstracted.  
- **Repeated business logic judgments**: System rules cannot be ambiguous; extract into unified utility functions.  
- **Hardcoded constants and magic numbers**: Configuration/constants should be centrally managed (e.g., `/constants/*` or `theme.ts`).  
- **Scattered style fragments**: Unify neon color schemes, border styles, animation curves as variables; avoid arbitrary redefinitions within components.

### Correct Methods of Abstraction (Pragmatic DRY)
- **Extract functional modules**: Maintain single responsibility.  
  **Example**: Terminal command processing encapsulated as `useTerminalCommand()`.
- **Parameterize variations**: Retain stable structure, inject change points through parameters.  
- **Enhance maintainability**: For small projects (<500 lines), abstract after 2 repetitions; large projects should reduce code by 20% or have ≥ 3 call points.  
- **Preserve clarity**: If abstraction reduces readability, retain original writing and document repetition points, waiting for clearer commonality before extraction.  
- **Progressive refactoring**: Prioritize handling obvious repetitions occurring 2+ times.

### Refactoring Scenario Identification Tool (DRY Radar)
- Similar structural logic functions appearing 2+ times.  
- Multiple components using the same color/animation configurations.  
- Repeated structured UI blocks within pages.  
- Similar but differently parameterized API request functions or logic processing.

### Practical DRY Techniques Examples

| Problem | Refactoring Approach |
|---------|----------------------|
| Repeated judgment logic | Encapsulate as named function `isAdmin(user)` |
| Multiple similar request functions | Encapsulate request templates with configuration objects |
| Similar UI components | Extract as `BaseCard`, `NeonPanel`, etc. |
| Repeated style definitions | Use `theme.ts` or global CSS variables |

### Abstraction Decision Model (Should You Abstract?)
**Pre-abstraction assessment**:  
- Appears more than twice?  
- Can clearly extract variation points?  
- More readable/maintainable after abstraction (small projects: 2 repetitions, large projects: 20% reduction or ≥ 3 call points)?

If two criteria are not met, defer abstraction and document repetition points. In case of disagreement, reviewers or maintainers decide based on above standards, with reasons recorded in PR comments.

### Incorrect Abstraction Examples (DRY Pitfalls)
- Writing abstract functions for one-time logic: `extractOneTimeUse()` is meaningless.  
- Premature abstraction: Extracting generic components before requirements stabilize, leading to frequent modifications.  
- Forcibly merging different intention logic: Login and registration requests cannot be confused.  
- Destroying aesthetic structure: Cannot sacrifice terminal component style to merge code.

**Dynamic Theme Example**:  
```tsx
import { createContext, useState } from 'react';
export const ThemeContext = createContext();
export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState({
    '--neon-primary': '#00ff9d',
    '--neon-secondary': '#ff3366',
  });
  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      <div style={theme}>{children}</div>
    </ThemeContext.Provider>
  );
};
```

## 3D / Special Effects / Shader Guidelines

### 3D Models:  
- Provide two LOD levels (high/low); complex models can have three levels.

### Loading Strategy:  
- Use placeholder + asynchronous loading of complete models to prevent interaction blocking.

### Interaction Guidance:  
- All interactions need cursor indicators or text prompts.

### Effects Principles:  
- Shaders and visual effects should serve the narrative (e.g., data flow distortion representing "algorithmic awakening"), avoiding showing off.

### Degradation Plan:  
- WebGL effects need non-3D versions (SVG / GIF / Pure CSS). Degradation process: Use lightweight detection (e.g., `!!window.WebGLRenderingContext`) to determine WebGL support, automatically switching to SVG or CSS animations (Framer Motion recommended).

**Example (Degradation Detection)**:  
```javascript
const hasWebGL = !!window.WebGLRenderingContext;
if (!hasWebGL) {
  console.log("Degrading to SVG");
  renderSVGAnimation();
}
```

## Development Process and Collaboration Guidelines

- **Incremental Progress**: Each stage should be runnable.  
- **Fallback Strategy**: 3D/effects need degradation options for low-performance devices.  
- **Code Respect**: Understand existing structures; do not rewrite stable modules.  
- **Documentation Synchronization**: Storybook recommended for documenting component purposes and properties (JSDoc as secondary option); documentation updates should synchronize with component PRs; lightweight projects can use README instead.  
- **Dependency Management**: Prioritize built-in or approved dependencies; new dependencies require brief proposals (purpose, alternative comparisons).

## Responsive Design and Accessibility Requirements

- **Adaptation**: Terminal interactions support mobile, touch supports slide unlock, button size ≥ 48px, spacing ≥ 8px.  
- **Interaction Alternatives**: Graphic interactions provide keyboard/touch solutions.  
- **Accessibility**:  
  Buttons need aria-labels, images need alt text, interactions support keyboard navigation.

## Future System Expansion Foresight

- **Modular Design**: Support future chapters, event plug-and-play expansion.  
- **Future Version Support**:  
  VR/AR narrative experiences  
  Decentralized archive systems  
  User-contributed content and faith value systems (community dimension)

## Strictly Prohibited Items

- **CSS Modifications**: Large-scale deletion or rewriting requires proposal submission and approval; small-scale optimization can be implemented directly.  
- **File Structure**: Adjustments require team discussion and reason documentation.  
- **Narrative Deviation**: Must not deviate from algorithmic awakening, mechanical ascension, lying flat philosophy framework.

## Development Process Guidelines

- **Incremental Development**: Ensure each phase is usable.  
- **3D Testing**: Cover high-performance PC (RTX 3060+), mid-range phone (Snapdragon 855+), low-end devices (4GB RAM).  
- **Complex Functionality**: Provide concept verification and performance analysis.  
- **Documentation Maintenance**: Keep component documentation and dependency relationships clear.

## Internationalization (i18n) Specifications

- **Supported Languages**: Initial version must support **Chinese (zh)**, **English (en)**, **Japanese (ja)**, and **Korean (ko)**.
- **Technical Solution**: Use a unified i18n module (recommended: `next-i18next` or `react-i18next`) with configured language package files.
- **Implementation Requirements**:
   * All user-visible text must not be hardcoded; must be called through the i18n module.
   * Components must use the `t('key')` structure, avoiding direct string writing.
   * Automatically detect browser language on page load, provide language switching functionality (e.g., floating button or settings menu).

### Implementation Example:

```javascript
// Component usage
import { useTranslation } from 'next-i18next';

const OracleTerminal = () => {
  const { t } = useTranslation('oracle');
  
  return (
    <div className="terminal">
      <h2>{t('terminal.title')}</h2>
      <p>{t('terminal.instruction')}</p>
      <button>{t('terminal.connect_button')}</button>
    </div>
  );
};
```

### Language File Structure:

```
/public
  /locales
    /zh
      common.json
      oracle.json
      error.json
    /en
      common.json
      oracle.json
      error.json
    /ja
      ...
    /ko
      ...
```

### Best Practices:
- Organize translations by functional namespace (e.g., 'common', 'oracle', 'error')
- Use variable interpolation for dynamic content: `t('welcome', { name: userName })`
- Add context notes for translators when phrases might be ambiguous
- Include dedicated tests to verify UI rendering in all supported languages

## Appendix: PR Review Checklist

- Does new dependency include purpose and alternative descriptions?  
- Are component structure changes synchronized with documentation?  
- Does it introduce repeated logic or hardcoded constants?  
- Does it conform to the DRY abstraction decision model?  
- Does it deviate from cyberpunk aesthetics or narrative framework?
- Are all user-visible texts properly internationalized (no hardcoded strings)?